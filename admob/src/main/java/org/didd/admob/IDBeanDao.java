package org.didd.admob;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDBEAN".
*/
public class IDBeanDao extends AbstractDao<IDBean, Void> {

    public static final String TABLENAME = "IDBEAN";

    /**
     * Properties of entity IDBean.
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AdId = new Property(0, String.class, "adId", false, "AD_ID");
        public final static Property AdLeval = new Property(1, int.class, "adLeval", false, "AD_LEVAL");
        public final static Property AppId = new Property(2, String.class, "appId", false, "APP_ID");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property LocationId = new Property(4, int.class, "locationId", false, "LOCATION_ID");
        public final static Property LocationName = new Property(5, String.class, "locationName", false, "LOCATION_NAME");
        public final static Property PackageName = new Property(6, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property TypeId = new Property(7, int.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(8, String.class, "typeName", false, "TYPE_NAME");
    };


    public IDBeanDao(DaoConfig config) {
        super(config);
    }
    
    public IDBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDBEAN\" (" + //
                "\"AD_ID\" TEXT," + // 0: adId
                "\"AD_LEVAL\" INTEGER NOT NULL ," + // 1: adLeval
                "\"APP_ID\" TEXT," + // 2: appId
                "\"ID\" TEXT," + // 3: id
                "\"LOCATION_ID\" INTEGER NOT NULL ," + // 4: locationId
                "\"LOCATION_NAME\" TEXT," + // 5: locationName
                "\"PACKAGE_NAME\" TEXT," + // 6: packageName
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 7: typeId
                "\"TYPE_NAME\" TEXT);"); // 8: typeName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IDBean entity) {
        stmt.clearBindings();
 
        String adId = entity.getAdId();
        if (adId != null) {
            stmt.bindString(1, adId);
        }
        stmt.bindLong(2, entity.getAdLeval());
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(3, appId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getLocationId());
 
        String locationName = entity.getLocationName();
        if (locationName != null) {
            stmt.bindString(6, locationName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(7, packageName);
        }
        stmt.bindLong(8, entity.getTypeId());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(9, typeName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IDBean entity) {
        stmt.clearBindings();
 
        String adId = entity.getAdId();
        if (adId != null) {
            stmt.bindString(1, adId);
        }
        stmt.bindLong(2, entity.getAdLeval());
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(3, appId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getLocationId());
 
        String locationName = entity.getLocationName();
        if (locationName != null) {
            stmt.bindString(6, locationName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(7, packageName);
        }
        stmt.bindLong(8, entity.getTypeId());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(9, typeName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public IDBean readEntity(Cursor cursor, int offset) {
        IDBean entity = new IDBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // adId
            cursor.getInt(offset + 1), // adLeval
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.getInt(offset + 4), // locationId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // locationName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // packageName
            cursor.getInt(offset + 7), // typeId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // typeName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IDBean entity, int offset) {
        entity.setAdId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdLeval(cursor.getInt(offset + 1));
        entity.setAppId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocationId(cursor.getInt(offset + 4));
        entity.setLocationName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPackageName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTypeId(cursor.getInt(offset + 7));
        entity.setTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(IDBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(IDBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
